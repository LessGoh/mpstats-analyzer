"""
–ú–æ–¥—É–ª—å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –Ω–∏—à
"""

class ProductRatingCalculator:
    """–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–µ–π—Ç–∏–Ω–≥–∞ —Ç–æ–≤–∞—Ä–Ω—ã—Ö –Ω–∏—à"""
    
    def __init__(self):
        # –í–µ—Å–∞ –º–µ—Ç—Ä–∏–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö)
        self.weights = {
            'demand': 30,    # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤/—Ç–æ–≤–∞—Ä—ã
            'revenue': 25,   # –û–±—ä–µ–º –≤—ã—Ä—É—á–∫–∏
            'ads': 25,       # –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã
            'organic': 20    # –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Ä–≥–∞–Ω–∏–∫–∏
        }
        
        # –ü–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.thresholds = {
            'min_revenue': 1000000,  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –≤—ã—Ä—É—á–∫–∞ (‚ÇΩ/–º–µ—Å)
            'min_demand_ratio': 1.0  # –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤/—Ç–æ–≤–∞—Ä—ã
        }
    
    def update_weights(self, weights):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤–µ—Å–∞ –º–µ—Ç—Ä–∏–∫"""
        self.weights.update(weights)
    
    def update_thresholds(self, thresholds):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø–æ—Ä–æ–≥–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è"""
        self.thresholds.update(thresholds)
    
    def calculate_rating(self, metrics):
        """
        –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–Ω–æ–π –Ω–∏—à–∏
        
        Args:
            metrics (dict): –°–ª–æ–≤–∞—Ä—å —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
                - demand_ratio: —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–æ–≤/—Ç–æ–≤–∞—Ä—ã
                - revenue: –≤—ã—Ä—É—á–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ (‚ÇΩ/–º–µ—Å)
                - price_ad_ratio: —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω–∞/—Å—Ç–∞–≤–∫–∞
                - organic_percent: –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π
        
        Returns:
            dict: –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ —Å –∏—Ç–æ–≥–æ–≤—ã–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º –∏ –¥–µ—Ç–∞–ª–∏–∑–∞—Ü–∏–µ–π
        """
        
        # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Ç—Ä–∏–∫ –∫ —à–∫–∞–ª–µ 0-100
        demand_score = self._calculate_demand_score(metrics['demand_ratio'])
        revenue_score = self._calculate_revenue_score(metrics['revenue'])
        ad_efficiency_score = self._calculate_ad_efficiency_score(metrics['price_ad_ratio'])
        organic_score = self._calculate_organic_score(metrics['organic_percent'])
        
        # –ò—Ç–æ–≥–æ–≤—ã–π —Ä–µ–π—Ç–∏–Ω–≥ —Å —É—á–µ—Ç–æ–º –≤–µ—Å–æ–≤
        final_rating = (
            demand_score * (self.weights['demand'] / 100) +
            revenue_score * (self.weights['revenue'] / 100) +
            ad_efficiency_score * (self.weights['ads'] / 100) +
            organic_score * (self.weights['organic'] / 100)
        )
        
        return {
            'final_rating': round(final_rating, 1),
            'breakdown': {
                'demand': round(demand_score, 1),
                'revenue': round(revenue_score, 1),
                'ad_efficiency': round(ad_efficiency_score, 1),
                'organic': round(organic_score, 1)
            },
            'weights_used': self.weights.copy(),
            'thresholds_used': self.thresholds.copy()
        }
    
    def _calculate_demand_score(self, demand_ratio):
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å–ø—Ä–æ—Å–∞ –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è"""
        if demand_ratio < self.thresholds['min_demand_ratio']:
            return 0
        
        # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        import math
        score = min(demand_ratio * 15, 100)
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è
        if demand_ratio > 10:
            score = min(score * 1.2, 100)
        
        return score
    
    def _calculate_revenue_score(self, revenue):
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –≤—ã—Ä—É—á–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        if revenue < self.thresholds['min_revenue']:
            return 0
        
        # –õ–æ–≥–∞—Ä–∏—Ñ–º–∏—á–µ—Å–∫–∞—è —à–∫–∞–ª–∞
        import math
        ratio = revenue / self.thresholds['min_revenue']
        score = min(math.log10(ratio) * 50 + 50, 100)
        
        return max(score, 0)
    
    def _calculate_ad_efficiency_score(self, price_ad_ratio):
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Ä–µ–∫–ª–∞–º—ã"""
        if price_ad_ratio <= 0:
            return 0
        
        # –ß–µ–º –≤—ã—à–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Ü–µ–Ω—ã –∫ —Å—Ç–∞–≤–∫–µ, —Ç–µ–º –ª—É—á—à–µ
        score = min(price_ad_ratio * 3, 100)
        
        # –ë–æ–Ω—É—Å –∑–∞ –æ—á–µ–Ω—å –≤—ã—Å–æ–∫—É—é —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
        if price_ad_ratio > 50:
            score = min(score * 1.1, 100)
        
        return score
    
    def _calculate_organic_score(self, organic_percent):
        """–†–∞—Å—á–µ—Ç –æ—Ü–µ–Ω–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π"""
        # –ü—Ä—è–º–æ–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞–º
        return min(max(organic_percent, 0), 100)
    
    def interpret_rating(self, rating):
        """
        –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
        
        Args:
            rating (float): –†–µ–π—Ç–∏–Ω–≥ –æ—Ç 0 –¥–æ 100
        
        Returns:
            tuple: (—Å—Ç–∞—Ç—É—Å, –æ–ø–∏—Å–∞–Ω–∏–µ)
        """
        if rating >= 80:
            return "üü¢ –û—Ç–ª–∏—á–Ω–∞—è –Ω–∏—à–∞", "–ù–∏–∑–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, –≤—ã—Å–æ–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
        elif rating >= 60:
            return "üü° –•–æ—Ä–æ—à–∞—è –Ω–∏—à–∞", "–£–º–µ—Ä–µ–Ω–Ω–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, —Ö–æ—Ä–æ—à–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
        elif rating >= 40:
            return "üü† –°—Ä–µ–¥–Ω—è—è –Ω–∏—à–∞", "–í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, —Å—Ä–µ–¥–Ω–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
        else:
            return "üî¥ –ü–ª–æ—Ö–∞—è –Ω–∏—à–∞", "–û—á–µ–Ω—å –≤—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è, –Ω–∏–∑–∫–∏–π –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª"
    
    def get_recommendations(self, result):
        """
        –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞–Ω–∞–ª–∏–∑–∞
        
        Args:
            result (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å—á–µ—Ç–∞ —Ä–µ–π—Ç–∏–Ω–≥–∞
        
        Returns:
            list: –°–ø–∏—Å–æ–∫ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
        """
        recommendations = []
        breakdown = result['breakdown']
        
        if breakdown['demand'] < 40:
            recommendations.append({
                'type': 'warning',
                'text': '–ù–∏–∑–∫–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å–ø—Ä–æ—Å–∞ –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—é. –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –±–æ–ª–µ–µ —É–∑–∫—É—é –Ω–∏—à—É.',
                'action': '–ü–æ–∏—â–∏—Ç–µ –º–µ–Ω–µ–µ –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–µ –ø–æ–¥–∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–ª–∏ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã.'
            })
        
        if breakdown['revenue'] < 30:
            recommendations.append({
                'type': 'warning',
                'text': '–ù–∏–∑–∫–∞—è –≤—ã—Ä—É—á–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–µ–∑–æ–Ω–Ω–æ—Å—Ç—å –∏–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.',
                'action': '–ò–∑—É—á–∏—Ç–µ —Ç—Ä–µ–Ω–¥—ã –ø—Ä–æ–¥–∞–∂ –ø–æ –º–µ—Å—è—Ü–∞–º –∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.'
            })
        
        if breakdown['ad_efficiency'] < 40:
            recommendations.append({
                'type': 'warning',
                'text': '–ù–∏–∑–∫–∞—è —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —Ä–µ–∫–ª–∞–º—ã. –í—ã—Å–æ–∫–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–µ —Å—Ç–∞–≤–∫–∏ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ü–µ–Ω—ã —Ç–æ–≤–∞—Ä–∞.',
                'action': '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –±–æ–ª—å—à–∏–π —Ä–µ–∫–ª–∞–º–Ω—ã–π –±—é–¥–∂–µ—Ç –∏–ª–∏ –∏—â–∏—Ç–µ —Å–ø–æ—Å–æ–±—ã —Å–Ω–∏–∂–µ–Ω–∏—è —Å—Ç–∞–≤–æ–∫.'
            })
        
        if breakdown['organic'] < 50:
            recommendations.append({
                'type': 'warning',
                'text': '–ú–∞–ª–æ –æ—Ä–≥–∞–Ω–∏—á–µ—Å–∫–∏—Ö –ø–æ–∑–∏—Ü–∏–π. –í—ã—Å–æ–∫–∞—è –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏—è –≤ —Ä–µ–∫–ª–∞–º–µ.',
                'action': '–°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ—Å—å –Ω–∞ SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ –∏ –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤.'
            })
        
        # –ü–æ–∑–∏—Ç–∏–≤–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        if result['final_rating'] >= 70:
            recommendations.append({
                'type': 'success',
                'text': '–ù–∏—à–∞ –≤—ã–≥–ª—è–¥–∏—Ç –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≤—Ö–æ–¥–∞!',
                'action': '–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –¥–µ—Ç–∞–ª—å–Ω–æ–º—É –∞–Ω–∞–ª–∏–∑—É –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤ –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é –≤—Ö–æ–¥–∞.'
            })
        elif result['final_rating'] >= 50:
            recommendations.append({
                'type': 'info',
                'text': '–ù–∏—à–∞ –∏–º–µ–µ—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª, –Ω–æ —Ç—Ä–µ–±—É–µ—Ç –æ—Å—Ç–æ—Ä–æ–∂–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥–∞.',
                'action': '–ü–æ–¥–≥–æ—Ç–æ–≤—å—Ç–µ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–Ω—É—é —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±—é–¥–∂–µ—Ç –Ω–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ.'
            })
        
        return recommendations
    
    def compare_niches(self, niches_data):
        """
        –°—Ä–∞–≤–Ω–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–∏—à
        
        Args:
            niches_data (list): –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π —Å –¥–∞–Ω–Ω—ã–º–∏ –Ω–∏—à
        
        Returns:
            list: –û—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –Ω–∏—à —Å —Ä–µ–π—Ç–∏–Ω–≥–∞–º–∏
        """
        results = []
        
        for niche in niches_data:
            rating_result = self.calculate_rating(niche['metrics'])
            results.append({
                'name': niche.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –Ω–∏—à–∞'),
                'rating': rating_result['final_rating'],
                'details': rating_result
            })
        
        # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–π—Ç–∏–Ω–≥—É (—É–±—ã–≤–∞–Ω–∏–µ)
        results.sort(key=lambda x: x['rating'], reverse=True)
        
        return results
